{"version":3,"sources":["components/Emoji.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Wrapper","styled","div","List","ul","Item","li","prefixPath","process","console","log","emojiMap","emojiList","Array","from","length","v","i","map","emoji","name","url","Emoji","onSelect","index","src","onClick","title","alt","App","inputRef","useRef","useState","content","setContent","handleKeyDown","useCallback","event","keyCode","current","selectionStart","selectionEnd","indexEnd","value","charAt","preventDefault","indexStart","lastIndexOf","setRangeText","handleSelect","emojiText","focus","blur","handleSend","matchResult","match","forEach","emotionKey","replace","text","className","dangerouslySetInnerHTML","__html","ref","onKeyDown","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f97f5de6.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport styled from 'styled-components';\n\nexport interface IEmoji{\n   name : string;\n   url: string;\n}\n\n\nconst Wrapper = styled.div`\n    width: 100%;\n    height: 80px;\n`\n\nconst List = styled.ul`\n   margin: 0;\n   padding: 0;\n   width: 100%;\n   display: flex;\n   justify-content: space-around;\n   flex-wrap: wrap;\n`\nconst Item = styled.li`\n   width: 48px;\n   list-style: none;\n`\n\nconst prefixPath: string = process.env.NODE_ENV === 'development'? 'http://localhost:3000/aj74/images': `${process.env.PUBLIC_URL}/images`;\n\nconsole.log('process.env.PUBLIC_URL',process.env)\n\ninterface IEmojiProps {\n   onSelect : (emoji: IEmoji) => void;\n}\n\n\n\nexport let emojiMap : any= {};\nconst origin = Array.from({length: 4}, (v, i) => ++i);\nconst emojiList: IEmoji[] = origin.map((emoji)=> {\n    const name = `andy${emoji}`\n    const url = `${prefixPath}/${emoji}.png`;\n    emojiMap[`[andy${emoji}]`] = url;\n    return { name, url }\n}) \n\nexport const Emoji:FC<IEmojiProps> = ({ onSelect }) => {\n \n    return (\n        <Wrapper>\n            <List>\n                {emojiList.map((emoji, index)=>(\n                    <Item key={index}>\n                        <img src={emoji.url} onClick={()=> { onSelect(emoji)}} title=\"\" alt=\"\" />\n                    </Item>\n                ))}\n                \n            </List>    \n        </Wrapper>\n    )\n}\n\n","import React, { useCallback, useRef, useState } from 'react';\nimport { Emoji, emojiMap } from './components/Emoji';\nimport type { IEmoji } from './components/Emoji';\nimport './App.css';\n\nfunction App() {\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [content, setContent] = useState<string>('');\n\n  const handleKeyDown = useCallback((event: React.KeyboardEvent)=>{\n    if(event.keyCode === 8 && inputRef.current?.selectionStart && inputRef.current?.selectionStart === inputRef.current?.selectionEnd){\n      let indexEnd = inputRef.current?.selectionStart  - 1;\n      let charToDelete = inputRef.current?.value.charAt(indexEnd); \n      if (charToDelete === \"]\") {\n        event.preventDefault();\n        let indexStart = inputRef.current.value.lastIndexOf(\"[\", indexEnd);\n        inputRef.current?.setRangeText(\"\", indexStart, indexEnd + 1, \"end\")\n      }\n    }\n  },[inputRef]);\n\n  const handleSelect = useCallback((emoji: IEmoji) => {\n    if(inputRef.current){\n      const emojiText = `[${emoji.name}]`;\n      inputRef.current.focus();\n      inputRef.current.setRangeText(\n        emojiText,\n        inputRef.current.selectionStart ?? 0,\n        inputRef.current.selectionEnd ?? 0,\n        'end'\n      )\n      inputRef.current.blur();\n    }\n  },[inputRef]);\n\n  const handleSend = useCallback(()=>{\n    if(inputRef.current){\n      let content = inputRef.current.value;\n      if(content !== ''){\n       //eslint-disable-next-line\n        const emotionReg =  /\\[[^\\[\\]]+?\\]/g;\n        const matchResult = content.match(emotionReg);\n        if(matchResult){\n          matchResult.forEach((emotionKey) => {\n            if (emotionKey in emojiMap) {\n              content = content.replace(\n                emotionKey,\n                `<img src=\"${emojiMap[emotionKey]}\">`\n              );\n            }\n          });\n        }\n        setContent(text => text+content);\n        inputRef.current.value = ''; \n      } \n    \n    }\n  },[inputRef]);\n\n  return (\n    <div className=\"App\"> \n      <section className=\"message\" dangerouslySetInnerHTML={{__html: content}} />\n      <section className=\"container\">\n        <div className='content'>\n           <input ref={inputRef} onKeyDown={handleKeyDown} type=\"text\" className=\"text\" />\n           <button className=\"btn\" onClick={handleSend}>send</button>\n        </div>      \n        <Emoji \n          onSelect={handleSelect}\n        />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}